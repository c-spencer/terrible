(ns "terrible/core")

(require "trbl!terrible/jsm")

(def defmacro
  (macro [name & body]
    `(def ~name (macro ~@body))))

(defmacro -> [left & applicators]
  (for [app applicators]
    (if (or (= app.type "Symbol") (= app.type "Keyword"))
      (set! left `(~app ~left))
      (do
        (app.splice 1 0 left)
        (set! left app))))
  left)

; Exponentiation
(defmacro ** [a b & r]
  (if (not b) a
    `(** (Math.pow ~a ~b) ~@r)))

(-> {:a 6} :a)

(defmacro defn [name bindings & body]
  `(def ~name (fn ~bindings ~@body)))

(defn + [left & args]
  (do
    (for [right args]
      (set! left (+ left right)))
    left))

(defn reduce [cb left arr]
  (if (= arr undefined)
    (do
      (set! arr left)
      (set! left undefined)))
  (for [right arr]
    (if (= left undefined)
      (set! left right)
      (set! left (cb left right))))
  left)

(+ 1 2)

(reduce + [1 2 3])

(apply + [1 2 3])

(bitwise-not 5)
